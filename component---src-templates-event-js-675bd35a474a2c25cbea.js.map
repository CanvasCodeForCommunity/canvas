{"version":3,"sources":["webpack:///./src/components/events/ImageCardComponent.js","webpack:///./src/components/events/ImageHeaderComponent.js","webpack:///./src/templates/event.js"],"names":["ImageCardComponent","render","cover_img","this","props","classes","react_default","a","createElement","Grid_default","item","xs","sm","Card_default","className","card","CardActionArea_default","components_image","filename","Component","propTypes","PropTypes","string","isRequired","withStyles","theme","maxWidth","ImageHeaderComponent","_this$props","siteTitle","location","siteDescription","date","header","container","Typography_default","variant","whiteText","background","primary","marginBottom","height","margin","padding","display","flexDirection","justifyContent","color","IndividualEvent","createImageGrid","images","root","spacing","map","image","index","events_ImageCardComponent","node","relativePath","data","event","frontmatter","edges","layout","seo","title","events_ImageHeaderComponent","description","pageQuery","withRoot","flexGrow","paper","unit","textAlign","palette","text","secondary"],"mappings":"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","file":"component---src-templates-event-js-675bd35a474a2c25cbea.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Image from '../../components/image';\n\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\n\nconst styles = theme => ({\n  card: {\n    maxWidth: 400,\n  },\n});\n\nclass ImageCardComponent extends Component {\n  \n  render() {\n    const { cover_img } = this.props;\n    const { classes } = this.props;\n    return (\n      <Grid item xs={12} sm={4}>\n        <Card className={classes.card}>\n          <CardActionArea>\n            <Image filename={cover_img} />\n            \n          </CardActionArea>\n        </Card>\n      </Grid>\n    );\n  }\n}\n\nImageCardComponent.propTypes = {\n  cover_img: PropTypes.string.isRequired\n};\n\n//make this component available to the app\nexport default withStyles(styles)(ImageCardComponent);\n","import React, { Component } from 'react';\nimport { primary } from '../../utils/Colors';\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  header: {\n    background: primary,\n    marginBottom: '1.45rem',\n    height: '30vh',\n  },\n  container: {\n    margin: '0 auto',\n    padding: '1.45rem 1.0875rem',\n    maxWidth: 960,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    height: '30vh',\n  },\n  whiteText: {\n    color: 'white',\n  },\n});\n\nclass ImageHeaderComponent extends Component {\n  \n  render() {\n    const { siteTitle, location, siteDescription, date } = this.props;\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.header}>\n        <div className={classes.container}>\n          <Typography variant=\"h3\" className={classes.whiteText}>\n            {siteTitle}\n          </Typography>\n\n          <Typography variant=\"h6\" className={classes.whiteText}>\n            {location} âˆ™ {date}\n          </Typography>\n\n          <Typography variant=\"body1\" className={classes.whiteText}>\n            {siteDescription}\n          </Typography>\n        </div>\n      </div>\n    );\n  }\n}\n\nImageHeaderComponent.propTypes = {\n  siteTitle: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  siteDescription: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(ImageHeaderComponent);\n","import React, { Component } from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport ImageCardComponent from '../components/events/ImageCardComponent';\nimport ImageHeaderComponent from '../components/events/ImageHeaderComponent';\n\nimport withRoot from '../components/withRoot';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    margin: '0 auto',\n    maxWidth: 960,\n    padding: '1.45rem 1.0875rem',\n  },\n  paper: {\n    padding: theme.spacing.unit * 2,\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n});\n\nclass IndividualEvent extends Component {\n  createImageGrid = (classes, images) => {\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={16}>\n          {images.map((image, index) => (\n            <ImageCardComponent cover_img={image.node.relativePath} />\n          ))}\n        </Grid>\n      </div>\n    );\n  };\n  render() {\n    const { classes } = this.props;\n    const { data } = this.props;\n    const event = data.event.frontmatter;\n    const images = data.images.edges;\n    return (\n      <Layout>\n        <SEO title={event.title} />\n        <ImageHeaderComponent\n          siteTitle={event.title}\n          location={event.location}\n          siteDescription={event.description}\n          date={event.date}\n        />\n        {this.createImageGrid(classes, images)}\n      </Layout>\n    );\n  }\n}\n\n//make this component available to the app\nexport default withRoot(withStyles(styles)(IndividualEvent));\n\n//query for index.md for that event and the images with it.\nexport const pageQuery = graphql`\n  query EventPostBySlug($slug: String!, $absolutePathRegex: String!) {\n    event: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt\n      frontmatter {\n        date(formatString: \"DD.MM.YYYY\")\n        title\n        description\n        location\n      }\n    }\n\n    images: allFile(\n      sort: { order: ASC, fields: [absolutePath] }\n      filter: {\n        absolutePath: { regex: $absolutePathRegex }\n        extension: { eq: \"jpg\" }\n      }\n    ) {\n      edges {\n        node {\n          relativePath\n          name\n          childImageSharp {\n            sizes(maxWidth: 600) {\n              ...GatsbyImageSharpSizes\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}